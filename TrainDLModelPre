import tensorflow as tf
from tensorflow.keras.applications import VGG16
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from google.colab import drive
drive.mount('/content/drive')
data_dir = '/content/drive/MyDrive/Collab'
vgg_model = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
for layer in vgg_model.layers:
 layer.trainable = False
model = Sequential()
model.add(vgg_model)
model.add(Flatten())
model.add(Dense(512, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(256, activation='relu'))
model.add(Dropout(0.5))
num_classes = 2
model.add(Dense(num_classes, activation='softmax'))
model.compile(optimizer=Adam(learning_rate=1e-4), loss='categorical_crossentropy', metrics=['accuracy'])
train_data_dir = data_dir + '/train'
validation_data_dir = data_dir + '/validation'
train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)
train_generator = train_datagen.flow_from_directory(
 train_data_dir,
 target_size=(224, 224),
 batch_size=32,
 class_mode='categorical', # Use 'categorical' for multi-class classification
 shuffle=True
)
validation_generator = test_datagen.flow_from_directory(
 validation_data_dir,
 target_size=(224, 224),
 batch_size=32,
 class_mode='categorical', # Use 'categorical' for multi-class classification
 shuffle=False
)
class_labels = train_generator.class_indices
print("Class labels:", class_labels)
model.fit(
 train_generator,
 steps_per_epoch=train_generator.samples // train_generator.batch_size,
 epochs=10, # Adjust the number of epochs as needed
 validation_data=validation_generator,
 validation_steps=validation_generator.samples // validation_generator.batch_size
)
validation_loss, validation_accuracy = model.evaluate(validation_generator)
print("Validation Accuracy:", validation_accuracy)
